{"version":3,"sources":["components/SearchLocation.js","components/HourlyForecast.js","components/WeatherAPI.js","components/CurrentWeather.js","components/App.js","redux/actions/actionType.js","redux/reducers/HourlyDataReducer.js","redux/sagas/saga.js","index.js"],"names":["SearchLocation","props","className","onSubmit","e","handleFormSubmit","type","placeholder","onChange","handleChange","HourlyForecast","handleHourlyData","res","hourlyData","data","hourly","setState","extractTime","dt","timeHr","Date","getHours","state","this","request","lat","long","getHourlyData","prevProps","length","Fragment","map","item","i","url","weather","icon","Math","round","temp","src","alt","description","main","React","Component","connect","HourlyDataReducer","HourlyDataResponse","dispatch","payload","getHourlyForecastData","axios","get","CurrentWeather","dateBuilder","d","day","getDay","month","getMonth","date","getDate","year","getFullYear","latitude","longitude","showData","a","location","response","coord","lon","cityName","name","title","message","indexOf","alert","App","target","value","showCurrentWeather","preventDefault","GET_WEATHER_DATA_SUCCESS","initialState","action","mySaga","fetchWeatherAPI","takeEvery","call","put","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3299f9b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../assets/SearchLocation.css';\r\n// functional component used as there is no state logic\r\nfunction SearchLocation(props) {\r\n    return (\r\n        <div className='search-container'>\r\n            <form onSubmit={(e) => props.handleFormSubmit(e)}>\r\n                <button className='search-btn' type='submit'>{'Search'}</button>\r\n                <input className='search-input' placeholder = {'Type a city and hit enter...'} onChange={(e) => props.handleChange(e)}></input>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchLocation;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport '../assets/HourlyForecast.css';\r\n\r\nclass HourlyForecast extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hourlyData: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { lat, long } = this.props;\r\n        const request = {\r\n            lat: lat,\r\n            long: long\r\n        }\r\n        this.props.getHourlyData(request);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.hourlyData !== prevProps.hourlyData) {\r\n            if (this.props.hourlyData) {\r\n                this.handleHourlyData(this.props.hourlyData);\r\n            }\r\n        }\r\n    }\r\n    handleHourlyData = res => {\r\n        const hourlyData = res.data.hourly;\r\n        this.setState({ hourlyData });\r\n    }\r\n    extractTime = dt => {\r\n        let timeStr = ':00 AM';\r\n        let dateObj = new Date(dt * 1000);\r\n        let timeHr = dateObj.getHours();\r\n        return (timeHr > 12 ? timeHr = (timeHr - 12) + ':00 PM' : timeHr = timeHr + timeStr);\r\n    }\r\n    render() {\r\n        const { hourlyData } = this.state;\r\n        return (\r\n            hourlyData.length > 0 ?\r\n                <React.Fragment>\r\n                    <div className='forecast-container'>\r\n                        <h3 className='forecast-heading'>{'Hourly Forecast'}</h3>\r\n                        <div className='forecast-items'>\r\n                            {hourlyData.map((item, i) => {\r\n                                const url = `http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`;\r\n                                return (\r\n                                    <div className='forecast-item' key={i}>\r\n                                        <p className='forecast-hour'>{this.extractTime(item.dt)}</p>\r\n                                        <p className='forecast-temp'>{`${Math.round(item.temp)}Â°C`}</p>\r\n                                        <img src={url} alt={item.weather[0].description} />\r\n                                        <p className='forecast-title'>{item.weather[0].main}</p>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment> : ''\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        hourlyData: state.HourlyDataReducer.HourlyDataResponse,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getHourlyData: request => dispatch({ type: 'GET_HOURLY_WEATHER_DATA', payload: request }),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HourlyForecast);","import axios from 'axios';\r\n\r\nexport function getCurrentWeatherData(location){\r\n    const key = '304835312fdd029d07c540a876ec147e';\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${key}`);\r\n}\r\n\r\nexport function getHourlyForecastData(lat,long){\r\n    const key = '304835312fdd029d07c540a876ec147e';\r\n    //return axios.get(`https://pro.openweathermap.org/data/2.5/forecast/hourly?q=${location}&units=metric&appid=${key}`).then(response => response.json());\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=metric&appid=${key}`);\r\n}","import React from 'react';\r\nimport HourlyForecast from './HourlyForecast';\r\nimport { getCurrentWeatherData } from './WeatherAPI';\r\nimport '../assets/CurrentWeather.css'\r\n\r\nclass CurrentWeather extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            latitude: '',\r\n            longitude: '',\r\n            showData: false,\r\n        }\r\n    }\r\n    dateBuilder = d => {\r\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        let day = days[d.getDay()];\r\n        let month = months[d.getMonth()];\r\n        let date = d.getDate();\r\n        let year = d.getFullYear();\r\n        return `${day} ${date} ${month} ${year}`;\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            let response = await getCurrentWeatherData(this.props.location);\r\n            const longitude = response.data.coord.lon;\r\n            const latitude = response.data.coord.lat;\r\n            const temp = Math.round(response.data.main.temp);\r\n            const cityName = response.data.name;\r\n            const title = response.data.weather[0].main;\r\n            const icon = response.data.weather[0].icon;\r\n            this.setState({\r\n                latitude,\r\n                longitude,\r\n                temp,\r\n                cityName,\r\n                title,\r\n                icon,\r\n                showData: true //flag to display the final data to prevent showing undefined\r\n            });\r\n        } catch (error) {\r\n            if(error.message.indexOf('404')){ // resource not found\r\n                alert('City not found. Please enter a valid city!');\r\n            }else{\r\n                alert(error.message);// displays network error or any other error\r\n            }\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const { latitude, longitude, cityName, temp, title, showData, icon } = this.state;\r\n        const url = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n        return (\r\n            showData && <React.Fragment>\r\n                <div className='current-weather'>\r\n                    <div className='current-weather-block'>\r\n                        <p className='current-weather-city'>{cityName}</p>\r\n                        <div className='current-weather-main'>\r\n                            <img src={url} alt={title} />\r\n                            <div className='current-weather-col'>\r\n                                <p className='current-weather-temp'>{`${temp}Â°C`}</p>\r\n                                <p className='current-weather-title'>{title}</p>\r\n                            </div>\r\n                        </div>\r\n                        <p className='current-weather-date'>{this.dateBuilder(new Date())}</p>\r\n                    </div>\r\n                </div>\r\n                <HourlyForecast lat={latitude} long={longitude} />\r\n            </React.Fragment>\r\n        )\r\n\r\n    }\r\n}\r\nexport default CurrentWeather;","import React from 'react';\nimport '../assets/App.css';\nimport SearchLocation from './SearchLocation';\nimport CurrentWeather from './CurrentWeather';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: '',\n      showCurrentWeather: true,\n    }\n  }\n  handleChange = e => {\n    this.setState({\n      location: e.target.value,\n      showCurrentWeather: false // showCurrentWeather is set false to prevent the current weather component to be loaded onkey press\n    });\n  }\n  handleFormSubmit = e => {\n    e.preventDefault();\n    this.setState({ showCurrentWeather: true });\n  }\n  componentWillUnmount() {\n    this.setState({ location: '', showCurrentWeather: false }) // clearing all state onrefresh\n  }\n  render() {\n    let { showCurrentWeather, location } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {'Weather Forecast'}\n        </header>\n        <SearchLocation handleChange={this.handleChange} handleFormSubmit={this.handleFormSubmit} />\n        {location && showCurrentWeather ? <CurrentWeather location={location} /> : ''}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const GET_HOURLY_WEATHER_DATA = 'GET_HOURLY_WEATHER_DATA';\r\nexport const GET_WEATHER_DATA_SUCCESS = 'GET_WEATHER_DATA_SUCCESS';\r\n","import * as type from '../actions/actionType';\r\n\r\nconst initialState = {\r\n    HourlyDataResponse :[],\r\n}\r\n\r\nconst HourlyDataReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case type.GET_WEATHER_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                HourlyDataResponse : action.hourlyData\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default HourlyDataReducer;","import { call, put, takeEvery } from 'redux-saga/effects';\r\nimport { GET_HOURLY_WEATHER_DATA, GET_WEATHER_DATA_SUCCESS } from '../actions/actionType';\r\nimport { getHourlyForecastData } from '../../components/WeatherAPI';\r\n\r\nfunction* mySaga(){\r\n    yield takeEvery(GET_HOURLY_WEATHER_DATA,fetchWeatherAPI);\r\n}\r\nfunction* fetchWeatherAPI(action){\r\n    const { lat, long } = action.payload;\r\n    const hourlyData = yield call(getHourlyForecastData,lat,long);\r\n    yield put({type: GET_WEATHER_DATA_SUCCESS, hourlyData});\r\n}\r\nexport default mySaga;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport HourlyDataReducer from './redux/reducers/HourlyDataReducer';\nimport mySaga from './redux/sagas/saga';\n\n//Redux configurations\nconst sagaMiddleware = createSagaMiddleware();\nconst rootReducer = combineReducers({ HourlyDataReducer });\nconst store = createStore(rootReducer,applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(mySaga);\n\nReactDOM.render(  \n  <React.StrictMode>\n    <Provider store= {store}>\n      <App />\n    </Provider>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}